Function: User Login
Url: backend/login/
Type: POST
Input: {"user":{"username":"xxx","password":"yyy"}}
Output:
{
    "message":"error/success",
    "user":
    {
        "user_id":0,
        "user_name":"IHMS",
        "email":"asdasd@asdasd.com",
        "pass_word":"123456",
        "privacy":true
        // empty if fail
    },
    "gamelist" : [
        {"game_name" : "abc", "game_id" : "123", "thumbnail" : "url.com", "description" : "xyz"},
        ....
        ....
    ],
    "wishlist": [
        {"game_name" : "abc", "game_id" : "123"},
        ....
        ....
    ]
}

Function: Edit User Played/Wishlist
Url: backend/edit_list/
Type: POST
Input: {"user" : { "username" : "xxx", "game_id" : "yyy", "wish" : "True/False", "played" : "True/False"}
userid=x, game_id=y, wish=True/False, played=True/False
Output:
Outputs the new played and wish list, same outout as backend/user_prof

Function: Search Game
Url: backend/search_game/
Type: GET
Input: q=keywords_separated_by_spaces, category=categories_separated_by_commas
Output:
{
    "results":
    [ // List of results of this format
        {
            "game_id": 1,
            "game_name": "Left for dank",
            "num_player": 23
        },
        {
            "game_id": 3,
            "game_name": "Age of MEme-pires 2",
            "num_player": 23
        }
        ...
        ...
        // empty if no matches
    ]

}

Function: Get top 'n' number of games
Url: backend/get_top_games/
Type: GET
Input: n=number_of_games_requested
Output:
{
    "results":
    [ // List of results of this format
        {
            "game_id": 1,
            "game_name": "Left 4 dead",
            "num_player": 23
            ... other stats
        },
        {
            "game_id": 3,
            "game_name": "Age of MEme-pires 2",
            "num_player": 23
            ... other stats
        }
        ...
        ...
        // empty if no matches

    ]
}

Function: Get game info for specific game_id
Url: backend/get_game_info
Type: GET
Input: gameid=gameid_of_target_game, username=(empty if no user logged in, and if user logged in, give username)
Output:
--> Case target game is found
{
    "game_info":
    [ // List of one object
        {
            "game_id": 1,
            "game_name": "Left 4 dead",
            "num_player": 23
            ... other stats
        }
    ],
    "in_game_list": "true/false",
    "in_wish_list": "true/false"
}
--> Case target game is NOT found
'{"message":"invalid gameid", "get_game_info":{}}'

Function: Check User's list
Url: backend/check_in_userlist/
Type: GET
Input: url parameters with userid=the_users_id, gameid=target_gameid, played=string_lowercase_true_or_false, wishlist=string_lowercase_true_or_false
Sample url: http://localhost:8000/backend/check_in_userlist/?userid=76561197960530222&gameid=578080&played=true&wishlist=false
Output:
{"message":"Success"}
- or -
{"message":"Invalid Request"}

Function: Get User's Played Game List
Url: backend/game_list/
Type: POST
Input: {"user":{"username":"xxx"}}
Output:
{
    "message":"error/success"
    "gamelist": [
        {"game_name" : "abc", "game_id" : "123", "thumbnail" : "url.com", "description" : "xyz"},
        ....
        ....
    ]
}

Function: Get User's Wish List
Url: backend/wish_list/
Type: POST
Input: {"user":{"username":"xxx"}}
Output:
{
    "message":"error/success"
    "wishlist": [
        {"game_name" : "abc", "game_id" : "123", "thumbnail" : "url.com", "description" : "xyz"},
        ....
        ....
    ]
}

Function: Make user1 follow user2
Url: backend/follow_user/
Type: POST
Input: {"user":{"user1":"xxx", "user2":"yyy"}}
Example: curl -d '{"user":{"user1" : "a regular", "user2" : "Jarmustard"}}' -X POST "http://localhost:8000/backend/follow_user/"
Output:
{
    "message":"message",
    "success":"True/False"
}

Function: Show the list of people that a user follows
Url: backend/follow_list/
Type: POST
Input: {"user":{"username":"xxx"}}
Example: curl -d '{"user":{"username" : "a 1regular"}}' -X POST "http://localhost:8000/backend/follow_list/"
Output:
{
    "message":"success",
    "follower":"xxx",
    "followed_list": [
        {"user_name" : "abc", "num_games" : "123"},
        ....
        ....
    ]
}

Function: Check session
Url: backend/session_check/
Type: POST
Input: {"user":{"username":"xxx", "session_id":"yyy"}}
Output:
{
    "message":"error/success",
    "user":
    {
        "user_id":0,
        "user_name":"xxx",
        "email":"asdasd@asdasd.com",
        "pass_word":"123456",
        "privacy":true
        // empty if fail
    }
}

Function: Logout
Url: backend/logout/
Type: POST
Input: {"user":{"username":"xxx", "session_id":"yyy"}}
Output:
Flushes cookie.
{
    "message" : "success"
}

Function: Get user profile
Url: backend/user_prof/
Type: GET
Input: user=xxx
Output:
{
    "user" : {"user_name" : "xxx", "user_id" : "xxx"},
    "gamelist" : [
        {"game_name" : "abc", "game_id" : "123", "thumbnail" : "url.com", "description" : "xyz"},
        ....
        ....
    ]
    "wishlist": [
        {"game_name" : "abc", "game_id" : "123"},
        ....
        ....
    ]
}

Function: Rate and Review
Url: backend/rating/
Type: POST
Input: {"rating": {"username":"IHMS","gameid":4, "rate":4, "comment":"mada mada"} }
Output:
{
    "message":"error/success"
}

Function: Recommender_v1
Url: backend/recommend_v1
Input: username=username_of_target_user
Output:
{
    "results":
    [ // List of results of this format
        {
            "game_id": 1,
            "game_name": "Left 4 dead",
            "num_player": 23
            ... other stats
        },
        {
            "game_id": 3,
            "game_name": "Age of MEme-pires 2",
            "num_player": 23
            ... other stats
        }
        ...
        ...
        //  Returns top 5 games ever if user has no games

    ]
}